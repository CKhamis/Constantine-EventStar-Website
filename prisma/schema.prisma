// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Costi Online Accounts
// model User {
//   id              Int      @id @default(autoincrement())
//   date_created    DateTime @default(now())
//   email           String   @unique @db.VarChar(255)
//   enabled         Boolean
//   first_name      String   @db.VarChar(255)
//   is_locked       Boolean
//   last_name       String   @db.VarChar(255)
//   password        String   @db.Text
//   profile_picture Int      @default(1)
//   role            UserRole @default(USER)
//   eventstar       Guest?
// }

// EventStar Schema
// Guest -> User
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phoneNumber   String?   @db.VarChar(10)
  discordId     String?
  event         Event[]
  rsvp          Rsvp[]
  role          UserRole  @default(USER)

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Rsvp {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  event     Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
  response  RsvpResponse @default(NO_RESPONSE)
  User      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Event {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  title          String         @db.VarChar(255)
  address        String         @db.VarChar(255)
  eventStart     DateTime       @db.DateTime()
  eventEnd       DateTime       @db.DateTime()
  rsvpDuedate    DateTime       @db.DateTime()
  description    String         @db.LongText
  inviteRigidity InviteRigidity
  eventType      EventType
  reminderAmount ReminderAmount
  RSVP           Rsvp[]
  author         User           @relation(fields: [authorId], references: [id])
  authorId       String
}

// Enums
enum UserRole {
  OWNER
  ADMIN
  USER
}

enum RsvpResponse {
  YES
  NO
  MAYBE
  NO_RESPONSE
}

enum InviteRigidity {
  OPEN_INVITE
  ASK_HOST
  INVITE_ONLY
}

enum EventType {
  PARTY
  HANGOUT
  GENERAL_EVENT
  CEREMONY
  MEETING
  CELEBRATION
}

enum ReminderAmount {
  OBSESSIVE
  PUSHY
  MEDIUM
  LIGHT
  ONCE
  NONE
}
